select 
	distinct name
from main_day.attempts_4698_pq
where 
	timestamp 'epoch' + day * interval '1 second' between '2021-09-13' and '2021-10-17'
limit 10


select 
	(timestamp 'epoch' + day * interval '1 second')::date as report_period,
	event_user,
	case
        when sp.level < 50 then '0_early_game'
        when (su.payment_seg = 0 and su.skill_seg <= 0.411) then '0_non_payers_skill_1'
        when (su.payment_seg = 0 and su.skill_seg <= 0.663) then '0_non_payers_skill_2'
        when (su.payment_seg = 0 and su.skill_seg > 0.663) then '0_non_payers_skill_3'
        when (su.payment_seg <= 1.12 and su.skill_seg <= 0.584) then '1_low_payers_skill_1'
        when (su.payment_seg <= 1.12 and su.skill_seg <= 0.829) then '1_low_payers_skill_2'
        when (su.payment_seg <= 1.12 and su.skill_seg > 0.829) then '1_low_payers_skill_3'
        when su.payment_seg <= 3.575 then '2_normal_payers'
        when su.payment_seg <= 7.912 then '3_good_payers'
        when su.payment_seg > 7.912 then '4_super_payers'
    end as sp_seg,
	count(name) as wins
from main_day.attempts_4698_pq
left join
main_day.seg_users_4698_pq su using (event_user)
left join
main_day.seg_players_4698_pq sp on  sp.event_user = sp
where 
	timestamp 'epoch' + day * interval '1 second' between '2021-09-13' and '2021-10-01'
	and name = 'Level.LevelComplete'
	and timestamp 'epoch' + (su.hour-86400) * interval '1 second' = '2021-10-01'
	and timestamp 'epoch' + (sp.hour-86400) * interval '1 second' = '2021-10-01'
group by 1,2,3
order by 1
--limit 10



    case
 		when sp.level < 50 then '0_early_game'
        when su.payment_seg = 0 then '0_non_payers'
        when su.payment_seg <= {low_payment} then '1_low_payers'
        when su.payment_seg <= {normal_payment} then '2_normal_payers'
        when su.payment_seg <= {good_payment} then '3_good_payers'
        else '4_super_payers'
    end pay_seg,
from 


case
        when sp.level < 50 then '0_early_game'
        when (su.payment_seg = 0 and su.skill_seg <= 0.411) then '0_non_payers_skill_1'
        when (su.payment_seg = 0 and su.skill_seg <= 0.663) then '0_non_payers_skill_2'
        when (su.payment_seg = 0 and su.skill_seg > 0.663) then '0_non_payers_skill_3'
        when (su.payment_seg <= 0.991 and su.skill_seg <= 0.584) then '1_low_payers_skill_1'
        when (su.payment_seg <= 0.991 and su.skill_seg <= 0.829) then '1_low_payers_skill_2'
        when (su.payment_seg <= 0.991 and su.skill_seg > 0.829) then '1_low_payers_skill_3'
        when su.payment_seg <= 3.075 then '2_normal_payers'
        when su.payment_seg <= 6.912 then '3_good_payers'
        when su.payment_seg > 6.912 then '4_super_payers'
    end as sp_seg,
    count(sp.event_user) as all_users
    from
        main_day.seg_players_{platform}_pq sp
            join
        main_day.seg_users_{platform}_pq su using(event_user)
    main_day.seg_users_{platform}_pq su
    
